expression -> assignment ;
assignment -> IDENTIFIER "=" assignment
            | logical_or ;
logical_or -> logical_and ( "or" logical_and )* ;
logical_and-> equality ( "and" equality )* ;
equality   -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       -> factor ( ( "-" | "+" ) factor )* ;
factor     -> unary ( ( "/" | "*" ) unary )* ;
unary      -> ( "!" | "-" ) unary | call ;
call       -> primary ( "(" arguments? ")" )* ;
arguments  -> expression ( "," expression )* ;
primary    -> NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")"
            | IDENTIFIER ;

program    -> declaration* EOF;
declaration -> varDecl
            | statement
            | funDecl ;
statement  -> exprStmt
            | printStmt
            | block
            | ifStmt
            | whileStmt
            | forStmt ;
exprStmt   -> expression ";";
printStmt  -> "print" expression ";";
varDecl    -> "var" IDENTIFIER ( "=" expression )? ";" ;
block      -> "{" declaration* "}" ;
ifStmt     -> "if" "(" expression ")" statement
              ( "else" statement )? ;
while      -> "while" "(" expression ")" statement ;
forStmt    -> "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression?  ")" statement ;
funDecl    -> "fun" function;
function   -> IDENTIFIER "(" parameters? ")" block ; 